-- Create auth users with proper credentials
-- First, let's check if there are triggers that should create users in public.users automatically

-- Create the Super Admin user in auth.users
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  confirmation_sent_at,
  confirmation_token,
  recovery_sent_at,
  recovery_token,
  email_change_sent_at,
  email_change,
  email_change_token_new,
  email_change_token_current,
  phone_change_sent_at,
  phone_change,
  phone_change_token,
  reauthentication_sent_at,
  reauthentication_token,
  email_change_confirm_status,
  banned_until,
  raw_app_meta_data,
  raw_user_meta_data,
  is_super_admin,
  created_at,
  updated_at,
  phone,
  phone_confirmed_at,
  phone_change_token_status,
  last_sign_in_at,
  invited_at,
  deleted_at
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  '1debb8f1-ccfc-4edb-b187-0695eac42ae8',
  'authenticated',
  'authenticated',
  'wasperstore@gmail.com',
  crypt('TempPassword123!', gen_salt('bf')),
  NOW(),
  NOW(),
  '',
  NULL,
  '',
  NULL,
  '',
  '',
  '',
  NULL,
  '',
  '',
  NULL,
  '',
  0,
  NULL,
  '{"provider": "email", "providers": ["email"]}',
  '{"role": "SUPER_ADMIN"}',
  false,
  NOW(),
  NOW(),
  '',
  NULL,
  0,
  NULL,
  NULL,
  NULL
) ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  encrypted_password = EXCLUDED.encrypted_password,
  raw_user_meta_data = EXCLUDED.raw_user_meta_data,
  updated_at = NOW();

-- Create the Hotel Owner user in auth.users  
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  confirmation_sent_at,
  confirmation_token,
  recovery_sent_at,
  recovery_token,
  email_change_sent_at,
  email_change,
  email_change_token_new,
  email_change_token_current,
  phone_change_sent_at,
  phone_change,
  phone_change_token,
  reauthentication_sent_at,
  reauthentication_token,
  email_change_confirm_status,
  banned_until,
  raw_app_meta_data,
  raw_user_meta_data,
  is_super_admin,
  created_at,
  updated_at,
  phone,
  phone_confirmed_at,
  phone_change_token_status,
  last_sign_in_at,
  invited_at,
  deleted_at
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  '6b1c0d77-84c7-4642-b745-2ae6d1068939',
  'authenticated',
  'authenticated', 
  'owner@luxuryhotel.com',
  crypt('TempPassword123!', gen_salt('bf')),
  NOW(),
  NOW(),
  '',
  NULL,
  '',
  NULL,
  '',
  '',
  '',
  NULL,
  '',
  '',
  NULL,
  '',
  0,
  NULL,
  '{"provider": "email", "providers": ["email"]}',
  '{"role": "OWNER", "tenant_id": "44444444-4444-4444-4444-444444444444"}',
  false,
  NOW(),
  NOW(),
  '',
  NULL,
  0,
  NULL,
  NULL,
  NULL
) ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  encrypted_password = EXCLUDED.encrypted_password,
  raw_user_meta_data = EXCLUDED.raw_user_meta_data,
  updated_at = NOW();

-- Make sure the corresponding public.users records exist with correct data
INSERT INTO public.users (id, email, role, tenant_id, name, is_active)
VALUES 
  ('1debb8f1-ccfc-4edb-b187-0695eac42ae8', 'wasperstore@gmail.com', 'SUPER_ADMIN', NULL, 'Super Admin', true),
  ('6b1c0d77-84c7-4642-b745-2ae6d1068939', 'owner@luxuryhotel.com', 'OWNER', '44444444-4444-4444-4444-444444444444', 'Hotel Owner', true)
ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  role = EXCLUDED.role,
  tenant_id = EXCLUDED.tenant_id,
  name = EXCLUDED.name,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();