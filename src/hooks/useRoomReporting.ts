import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

export interface RoomReport {
  roomNumber: string;
  roomType: string;
  status: string;
  guest?: string;
  checkIn?: string;
  checkOut?: string;
  folio?: any;
  generatedAt: string;
  generatedBy: string;
}

export const useRoomReporting = () => {
  const [isLoading, setIsLoading] = useState(false);

  const generateRoomReport = async (room: any) => {
    setIsLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const reportData: RoomReport = {
        roomNumber: room.room_number || room.number,
        roomType: room.room_type?.name || room.type,
        status: room.status,
        guest: room.current_reservation?.guest_name || room.guest,
        checkIn: room.current_reservation?.check_in_date || room.checkIn,
        checkOut: room.current_reservation?.check_out_date || room.checkOut,
        folio: room.folio,
        generatedAt: new Date().toISOString(),
        generatedBy: user.email || 'Unknown'
      };

      // Log report generation
      const { error } = await supabase
        .from('audit_log')
        .insert([{
          action: 'room_report_generated',
          resource_type: 'ROOM',
          resource_id: room.id,
          actor_id: user.id,
          actor_email: user.email,
          actor_role: user.user_metadata?.role,
          tenant_id: user.user_metadata?.tenant_id,
          description: `Room report generated for Room ${reportData.roomNumber}`,
          metadata: reportData as any
        }]);

      if (error) throw error;

      // Simulate printing or download
      console.log('Room Report Generated:', reportData);
      
      // In a real implementation, you might:
      // - Generate a PDF
      // - Send to printer via network printing
      // - Download as a file
      // - Email the report
      
      return reportData;
    } catch (error) {
      console.error('Error generating room report:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const printRoomReport = async (room: any) => {
    const report = await generateRoomReport(room);
    
    // Simulate print command
    if (window.print) {
      // Create a printable version
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <html>
            <head>
              <title>Room Report - ${report.roomNumber}</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .info-row { display: flex; justify-content: space-between; margin: 10px 0; }
                .label { font-weight: bold; }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Room Report</h1>
                <h2>Room ${report.roomNumber}</h2>
              </div>
              <div class="info-row">
                <span class="label">Room Type:</span>
                <span>${report.roomType}</span>
              </div>
              <div class="info-row">
                <span class="label">Status:</span>
                <span>${report.status}</span>
              </div>
              ${report.guest ? `
                <div class="info-row">
                  <span class="label">Guest:</span>
                  <span>${report.guest}</span>
                </div>
              ` : ''}
              ${report.checkIn ? `
                <div class="info-row">
                  <span class="label">Check-in:</span>
                  <span>${new Date(report.checkIn).toLocaleDateString()}</span>
                </div>
              ` : ''}
              ${report.checkOut ? `
                <div class="info-row">
                  <span class="label">Check-out:</span>
                  <span>${new Date(report.checkOut).toLocaleDateString()}</span>
                </div>
              ` : ''}
              <div class="info-row">
                <span class="label">Generated:</span>
                <span>${new Date(report.generatedAt).toLocaleString()}</span>
              </div>
              <div class="info-row">
                <span class="label">Generated by:</span>
                <span>${report.generatedBy}</span>
              </div>
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
        printWindow.close();
      }
    }
    
    return report;
  };

  return {
    generateRoomReport,
    printRoomReport,
    isLoading
  };
};